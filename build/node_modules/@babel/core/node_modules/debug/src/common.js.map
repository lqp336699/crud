{"version":3,"sources":["../../../../../../../backend/node_modules/@babel/core/node_modules/debug/src/common.js"],"names":["setup","env","createDebug","debug","default","coerce","disable","enable","enabled","humanize","require","Object","keys","forEach","key","instances","names","skips","formatters","selectColor","namespace","hash","i","length","charCodeAt","colors","Math","abs","prevTime","args","self","curr","Number","Date","ms","diff","prev","unshift","index","replace","match","format","formatter","val","call","splice","formatArgs","logFn","log","apply","useColors","color","destroy","extend","init","push","indexOf","delimiter","newDebug","namespaces","save","split","len","RegExp","substr","instance","map","toNamespace","join","name","test","regexp","toString","substring","Error","stack","message","load","module","exports"],"mappings":"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","file":"common.js","sourcesContent":["\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* Active `debug` instances.\n\t*/\n\tcreateDebug.instances = [];\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn match;\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.enabled = createDebug.enabled(namespace);\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = selectColor(namespace);\n\t\tdebug.destroy = destroy;\n\t\tdebug.extend = extend;\n\t\t// Debug.formatArgs = formatArgs;\n\t\t// debug.rawLog = rawLog;\n\n\t\t// env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\tcreateDebug.instances.push(debug);\n\n\t\treturn debug;\n\t}\n\n\tfunction destroy() {\n\t\tconst index = createDebug.instances.indexOf(this);\n\t\tif (index !== -1) {\n\t\t\tcreateDebug.instances.splice(index, 1);\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.substr(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0; i < createDebug.instances.length; i++) {\n\t\t\tconst instance = createDebug.instances[i];\n\t\t\tinstance.enabled = createDebug.enabled(instance.namespace);\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n"]}