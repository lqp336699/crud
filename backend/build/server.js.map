{"version":3,"sources":["../src/server.js"],"names":["app","use","bodyParser","json","url","mongodb","MongoClient","connect","useUnifiedTopology","err","db","dbo","get","req","res","collection","find","toArray","result","console","log","post","game","body","validData","error","isValid","insertOne","status","errors","global","ops","data","cover","name","Object","keys","length","listen"],"mappings":";;AACA;;;;AACA;;;;AACA;;;;;;AAEA,IAAMA,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQC,qBAAWC,IAAX,EAAR;;AAEA,IAAIC,MAAM,4BAAV;;AAEAC,kBAAQC,WAAR,CAAoBC,OAApB,CAA4BH,GAA5B,EAAkC,EAAEI,oBAAoB,IAAtB,EAAlC,EAAgE,UAASC,GAAT,EAAcC,EAAd,EAAkB;;AAE9E,QAAID,GAAJ,EAAS,MAAMA,GAAN;;AAET,QAAIE,MAAMD,GAAGA,EAAH,CAAM,MAAN,CAAV;;AAEAV,QAAIY,GAAJ,CAAQ,YAAR,EAAqB,UAACC,GAAD,EAAKC,GAAL,EAAW;AAC5BH,YAAII,UAAJ,CAAe,OAAf,EAAyBC,IAAzB,CAA8B,EAA9B,EAAkCC,OAAlC,CAA0C,UAASR,GAAT,EAAcS,MAAd,EAAsB;AAAE;AAC9D,gBAAIT,GAAJ,EAAS,MAAMA,GAAN;AACTU,oBAAQC,GAAR,CAAYF,MAAZ;AACAJ,gBAAIX,IAAJ,CAAS,EAACe,cAAD,EAAT;AACH,SAJD;AAKH,KAND;;AAQAlB,QAAIqB,IAAJ,CAAS,WAAT,EAAqB,UAACR,GAAD,EAAMC,GAAN,EAAY;AAC7B,YAAMQ,OAAOT,IAAIU,IAAjB;;AAD6B,yBAEFC,UAAUF,IAAV,CAFE;AAAA,YAErBG,KAFqB,cAErBA,KAFqB;AAAA,YAEdC,OAFc,cAEdA,OAFc;;AAI7B,YAAGA,OAAH,EAAW;AACPf,gBAAII,UAAJ,CAAe,OAAf,EAAwBY,SAAxB,CAAkCL,IAAlC,EAAwC,UAASb,GAAT,EAAcS,MAAd,EAAsB;AAC1D,oBAAIT,GAAJ,EAAS;AACLK,wBAAIc,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqB,EAAE0B,QAAQ,EAAEC,QAAQ,sBAAV,EAAV,EAArB;AACH,iBAFD,MAEM;AACFhB,wBAAIX,IAAJ,CAAS,EAAEmB,MAAMJ,OAAOa,GAAP,CAAW,CAAX,CAAR,EAAT;AACH;AACJ,aAND;AAOH,SARD,MAQO;AACHjB,gBAAIc,MAAJ,CAAW,GAAX,EAAgBzB,IAAhB,CAAqB,EAAEsB,YAAF,EAArB;AACH;AACJ,KAfD;AAiBH,CA/BD;;AAiCA;AACA,IAAMD,YAAY,SAAZA,SAAY,CAACQ,IAAD,EAAQ;AACtB,QAAIP,QAAQ,EAAZ;AACA,QAAGO,KAAKC,KAAL,KAAe,EAAlB,EAAqB;AAACR,cAAMQ,KAAN,GAAc,kBAAd;AAAiC;AACvD,QAAGD,KAAKE,IAAL,KAAc,EAAjB,EAAoB;AAACT,cAAMS,IAAN,GAAa,kBAAb;AAAgC;;AAErD,QAAMR,UAAUS,OAAOC,IAAP,CAAYX,KAAZ,EAAmBY,MAAnB,KAA4B,CAA5C;AACA,WAAO,EAAEZ,YAAF,EAASC,gBAAT,EAAP;AACH,CAPD;;AAUA1B,IAAIsC,MAAJ,CAAW,IAAX,EAAgB,YAAI;AAChBnB,YAAQC,GAAR,CAAY,qCAAZ;AACH,CAFD","file":"server.js","sourcesContent":["\nimport express from 'express'\nimport mongodb from 'mongodb'\nimport bodyParser from 'body-parser'\n\nconst app = express();\n\napp.use(bodyParser.json());\n\nvar url = \"mongodb://localhost:27017/\";\n\nmongodb.MongoClient.connect(url,  { useUnifiedTopology: true }, function(err, db) {\n\n    if (err) throw err;\n\n    var dbo = db.db(\"crud\");\n\n    app.get('/api/games',(req,res)=>{\n        dbo.collection(\"games\"). find({}).toArray(function(err, result) { // 返回集合中所有数据\n            if (err) throw err;\n            console.log(result);\n            res.json({result});\n        });\n    });\n\n    app.post('/api/save',(req, res)=>{\n        const game = req.body;\n        const { error, isValid } = validData(game);\n\n        if(isValid){\n            dbo.collection(\"games\").insertOne(game, function(err, result) {\n                if (err) {\n                    res.status(500).json({ errors: { global: \"Something went wrong\" } });\n                } else{\n                    res.json({ game: result.ops[0] });\n                }\n            });\n        } else {\n            res.status(400).json({ error });\n        }\n    });\n\n});\n\n// 字段的验证\nconst validData = (data)=>{\n    let error = {};\n    if(data.cover === ''){error.cover = 'can not be empty'}\n    if(data.name === ''){error.name = 'can not be empty'}\n\n    const isValid = Object.keys(error).length===0;\n    return { error, isValid}\n};\n\n\napp.listen(5000,()=>{\n    console.log(\"server is running on localhost:5000\")\n});"]}